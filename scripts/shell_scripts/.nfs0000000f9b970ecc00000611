#!/bin/bash

# --- 1. MANDATORY RESOURCE REQUESTS ---
#SBATCH --job-name=Hybrid_Sim_Loop
#SBATCH --time=06:00:00       
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=1      # 1 CPU core for the single-threaded Python process
#SBATCH --mem=64G              # Increased memory to prevent swapping/stalling
#SBATCH --output=slurm-rep_%j.out

# Exit immediately if a command exits with a non-zero status.
set -e

# VIRTUAL ENVIRONMENT SETUP
# Ensure you have already run 'pip install networkx pandas numpy etc.' inside this Venv!
VENV_PYTHON_EXE="/mnt/nfs2/bioenv/sg802/hybrid_sim_project/sim_env/bin/python"

# This is required to resolve the "libbz2.so.1.0" error on some nodes.
module load bzip2  
# On some systems, this may also be required:
module load zlib 

# Check if the virtual environment exists before proceeding
if [ ! -f "$VENV_PYTHON_EXE" ]; then
    echo "ERROR: Virtual environment Python not found at $VENV_PYTHON_EXE"
    echo "Please create the Venv and install required packages (e.g., networkx, pandas) before submitting."
    exit 1
fi


# Check if both a start and end replicate ID were provided
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Error: Both a start and end replicate ID are required."
    echo "Usage: sbatch $0 <start_replicate_id> <end_replicate_id>"
    exit 1
fi

# 2. CONFIGURATION
SIM_SCRIPT="/mnt/nfs2/bioenv/sg802/hybrid_sim_project/scripts/sim_v2.py"
ANALYSIS_SCRIPT="/mnt/nfs2/bioenv/sg802/hybrid_sim_project/scripts/python_helper_scripts/match_hybrid_to_parent_het.py"
PLOTTING_SCRIPT="/mnt/nfs2/bioenv/sg802/hybrid_sim_project/scripts/python_helper_scripts/visualisations/triangle_plot_grey_line.py"

# Persistent output directory (on slow NFS)
PERSISTENT_OUTPUT_DIR="/mnt/nfs2/bioenv/sg802/hybrid_sim_project/simulation_outputs/"

# Temporary output directory (on fast local scratch space)
SCRATCH_OUTPUT_DIR="${TMPDIR}/sim_output"
mkdir -p "${SCRATCH_OUTPUT_DIR}"

# Combined analysis file (will be created in the persistent dir)
ANALYSIS_OUTPUT_FILE="${PERSISTENT_OUTPUT_DIR}/combined_matching_generations.csv"


for ((i=$1; i<=$2; i++)); do
    # Define the directory for the current replicate's output on BOTH filesystems
    REPLICATE_DIR_SCRATCH="${SCRATCH_OUTPUT_DIR}/replicate_${i}"
    REPLICATE_DIR_PERSISTENT="${PERSISTENT_OUTPUT_DIR}/replicate_${i}"
    
    echo " "
    echo "--------------------------------------------------------"
    echo "Starting simulation for replicate $i (Outputting to $REPLICATE_DIR_SCRATCH)"
    echo "--------------------------------------------------------"
    
    mkdir -p "${REPLICATE_DIR_SCRATCH}/results"

    # Step 1: Run the Genetic Simulation (using VENV Python with -u for unbuffered output)
    "$VENV_PYTHON_EXE" -u "$SIM_SCRIPT" \
        --output_dir "$REPLICATE_DIR_SCRATCH" \
        --replicate_id "$i" \
        --file "/mnt/nfs2/bioenv/sg802/hybrid_sim_project/beetle_input.csv" \
        -npa 100 \
        -npb 100 \
        -HG 3000 \
        -nc 58 \
        -oh \
        -gmap

    echo "Simulation for replicate $i complete."

    # Step 2: Run the Analysis on the Simulation Outputs (using VENV Python with -u)
    echo "Starting the analysis of outputs for replicate $i"
    "$VENV_PYTHON_EXE" -u "$ANALYSIS_SCRIPT" \
        --input_dir "$REPLICATE_DIR_SCRATCH" \
        --output_file "$ANALYSIS_OUTPUT_FILE" \
        --replicate_id "$i"
    echo "Matching complete for replicate $i."
    
    # Step 3: Generate the triangle plot (using VENV Python with -u)
    echo "Generating triangle plot for replicate $i"

    # Extract the matching generation from the analysis file
    # 1. Get the raw generation label (e.g., "HG1607") and strip quotes
    RAW_GEN_LABEL=$(tail -n 1 "$ANALYSIS_OUTPUT_FILE" | awk -F, '{print $2}' | tr -d '"')
    
    # 2. Strip the 'HG' prefix to get only the number (e.g., 1607). This fixes the type mismatch error.
    MATCHING_GEN_NUMBER=${RAW_GEN_LABEL/HG/} 
    
    TRIANGLE_PLOT_OUTPUT="${REPLICATE_DIR_SCRATCH}/results/triangle_plot_rep_${i}.png"

    "$VENV_PYTHON_EXE" -u "$PLOTTING_SCRIPT" \
        --input_file "${REPLICATE_DIR_SCRATCH}/results/results_rep_${i}_individual_hi_het.csv" \
        --output_file "$TRIANGLE_PLOT_OUTPUT" \
        --highlight_gen "$MATCHING_GEN_NUMBER" # <-- FIX APPLIED
        
    echo "Plotting complete for replicate $i."

    # 3. CLEANUP: Copy all temporary files back to the persistent storage
    echo "Copying replicate $i results from SCRATCH to PERSISTENT storage..."
    mkdir -p "${REPLICATE_DIR_PERSISTENT}" # Ensure the final destination exists
    cp -r "${REPLICATE_DIR_SCRATCH}/." "${REPLICATE_DIR_PERSISTENT}/"

done

echo " "
echo "Workflow for replicate range $1 to $2 complete."